name: "test/build"
on:
  - push

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"

  checks:
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: show versions
        run: |
          rustup show
      - name: rustfmt
        run: |
          cd rust
          cargo fmt --version
          cargo fmt -- --check
      - name: clippy
        run: |
          cd rust
          cargo clippy --version
          cargo clippy --features "wallet","dev" --all-targets
          cargo clippy --features "baking","dev" --all-targets
      - name: audit
        run: |
          cd rust
          cargo audit --version
          cargo audit

  build:
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./rust/app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}
      - name: run rust tests
        run: make rust_test

  build-baking:
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    env:
      BAKING: "yes"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./rust/app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}
      - name: run rust tests
        run: make rust_test

  build_ledger:
    needs: configure
    runs-on: ubuntu-latest
    container:
      image: zondax/builder-bolos:latest
      options: --user ${{ needs.configure.outputs.uid_gid }}
    env:
      BOLOS_ENV: /opt/bolos
      HOME: /home/zondax_circle
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./rust/app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}

      - name: Build Nano S apps
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/nanos-secure-sdk
        run: |
          source $HOME/.cargo/env
          make build
      - name: Build Nano X apps
        shell: bash -l {0}
        env:
          BOLOS_SDK: ${{ github.workspace }}/deps/nanox-secure-sdk
        run: |
          source $HOME/.cargo/env
          make clean
          make build

      - name: Cache binary output
        uses: actions/cache@v1
        with:
          path: |
            ./rust/app/output
            ./rust/app/pkg/*.sh
          key: ${{ runner.os }}-${{ github.run_id }}-bin

  build_ledger_legacy:
    needs: configure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - name: Build Nano S apps
        run: |
          make build_legacy
      - name: Cache legacy elf files
        uses: actions/cache@v1
        with:
          path: ./legacy/output
          key: ${{ runner.os }}-${{ github.run_id }}-legacy

  test_zemu:
    needs: [ build_ledger, build_ledger_legacy ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./rust/app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}

      - name: Restore app elf files from cache
        uses: actions/cache@v1
        with:
          path: ./rust/app/output
          key: ${{ runner.os }}-${{ github.run_id }}-bin

      - name: Restore legacy build from cache
        uses: actions/cache@v1
        with:
          path: ./legacy/output
          key: ${{ runner.os }}-${{ github.run_id }}-legacy
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev

      - name: Install rust
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake binutils-dev libcurl4-openssl-dev libiberty-dev libelf-dev libdw-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain none -y;
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '14.17.0'
      - name: Install yarn
        run: npm install -g yarn
      - name: Build/Install build js deps
        run: |
          export PATH=~/.cargo/bin:$PATH
          make zemu_install
      - name: Run zemu tests
        run: |
          export PATH=~/.cargo/bin:$PATH
          make zemu_test


  build_package:
    needs: [ configure, checks, build, build-baking, test_zemu, build_ledger ]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    container:
      image: zondax/builder-bolos:latest
      options: --user ${{ needs.configure.outputs.uid_gid }}
    env:
      BOLOS_SDK: ${{ github.workspace }}/deps/nanos-secure-sdk
      BOLOS_ENV: /opt/bolos
      HOME: /home/zondax_circle
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache/restore Cargo dependencies
        uses: actions/cache@v1
        with:
          path: ./rust/app/.cargo
          key: ${{ runner.os }}-${{ hashFiles('./rust/Cargo.lock') }}

      - name: Restore package files from cache
        uses: actions/cache@v1
        with:
          path: ./rust/app/pkg
          key: ${{ runner.os }}-${{ github.run_id }}-bin

      - name: Install python dependencies
        run: pip install ledgerblue

      - name: Set tag name var
        id: vars
        run: echo ::set-output name=tag_name::$(./rust/app/pkg/installer_s.sh version)

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./rust/app/pkg/*
            !./rust/app/pkg/.gitkeep
          tag_name: ${{ steps.vars.outputs.tag_name }}
          draft: false
          prerelease: false
